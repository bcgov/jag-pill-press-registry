// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Gov.Jag.PillPressRegistry.Interfaces
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Net;
    using System.Net.Http;

    /// <summary>
    /// This OData service is located at
    /// https://wsgw.dev.jag.gov.bc.ca/pillpress/dev/api/data/v8.2/
    /// </summary>
    public partial class DynamicsClient : ServiceClient<DynamicsClient>, IDynamicsClient
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        public System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        public JsonSerializerSettings SerializationSettings { get; private set; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        public JsonSerializerSettings DeserializationSettings { get; private set; }

        /// <summary>
        /// Subscription credentials which uniquely identify client subscription.
        /// </summary>
        public ServiceClientCredentials Credentials { get; private set; }

        /// <summary>
        /// Gets the IAccounts.
        /// </summary>
        public virtual IAccounts Accounts { get; private set; }

        /// <summary>
        /// Gets the IActregulationreferences.
        /// </summary>
        public virtual IActregulationreferences Actregulationreferences { get; private set; }

        /// <summary>
        /// Gets the IApplicationtypes.
        /// </summary>
        public virtual IApplicationtypes Applicationtypes { get; private set; }

        /// <summary>
        /// Gets the IAreas.
        /// </summary>
        public virtual IAreas Areas { get; private set; }

        /// <summary>
        /// Gets the IBusinesscontacts.
        /// </summary>
        public virtual IBusinesscontacts Businesscontacts { get; private set; }

        /// <summary>
        /// Gets the ICecontacts.
        /// </summary>
        public virtual ICecontacts Cecontacts { get; private set; }

        /// <summary>
        /// Gets the ICecontacttypes.
        /// </summary>
        public virtual ICecontacttypes Cecontacttypes { get; private set; }

        /// <summary>
        /// Gets the ICertificateapprovedproducts.
        /// </summary>
        public virtual ICertificateapprovedproducts Certificateapprovedproducts { get; private set; }

        /// <summary>
        /// Gets the ICertificates.
        /// </summary>
        public virtual ICertificates Certificates { get; private set; }

        /// <summary>
        /// Gets the ICertificatetermsandconditionses.
        /// </summary>
        public virtual ICertificatetermsandconditionses Certificatetermsandconditionses { get; private set; }

        /// <summary>
        /// Gets the IComplaintcecontactset.
        /// </summary>
        public virtual IComplaintcecontactset Complaintcecontactset { get; private set; }

        /// <summary>
        /// Gets the IComplaints.
        /// </summary>
        public virtual IComplaints Complaints { get; private set; }

        /// <summary>
        /// Gets the ICustomaddresses.
        /// </summary>
        public virtual ICustomaddresses Customaddresses { get; private set; }

        /// <summary>
        /// Gets the ICustomproducts.
        /// </summary>
        public virtual ICustomproducts Customproducts { get; private set; }

        /// <summary>
        /// Gets the ICustomusers.
        /// </summary>
        public virtual ICustomusers Customusers { get; private set; }

        /// <summary>
        /// Gets the IEquipmentlocations.
        /// </summary>
        public virtual IEquipmentlocations Equipmentlocations { get; private set; }

        /// <summary>
        /// Gets the IEquipments.
        /// </summary>
        public virtual IEquipments Equipments { get; private set; }

        /// <summary>
        /// Gets the IIncidentbusinesscontactset.
        /// </summary>
        public virtual IIncidentbusinesscontactset Incidentbusinesscontactset { get; private set; }

        /// <summary>
        /// Gets the IInspectionactregulationrefset.
        /// </summary>
        public virtual IInspectionactregulationrefset Inspectionactregulationrefset { get; private set; }

        /// <summary>
        /// Gets the IInspectioninspectionchecklset.
        /// </summary>
        public virtual IInspectioninspectionchecklset Inspectioninspectionchecklset { get; private set; }

        /// <summary>
        /// Gets the IInspectionchecklistactreguset.
        /// </summary>
        public virtual IInspectionchecklistactreguset Inspectionchecklistactreguset { get; private set; }

        /// <summary>
        /// Gets the IInspectionchecklists.
        /// </summary>
        public virtual IInspectionchecklists Inspectionchecklists { get; private set; }

        /// <summary>
        /// Gets the IInspectionownershipcategories.
        /// </summary>
        public virtual IInspectionownershipcategories Inspectionownershipcategories { get; private set; }

        /// <summary>
        /// Gets the IInspectionprocessflows.
        /// </summary>
        public virtual IInspectionprocessflows Inspectionprocessflows { get; private set; }

        /// <summary>
        /// Gets the IInspections.
        /// </summary>
        public virtual IInspections Inspections { get; private set; }

        /// <summary>
        /// Gets the IInvestigations.
        /// </summary>
        public virtual IInvestigations Investigations { get; private set; }

        /// <summary>
        /// Gets the IInvestigationstepcecontactset.
        /// </summary>
        public virtual IInvestigationstepcecontactset Investigationstepcecontactset { get; private set; }

        /// <summary>
        /// Gets the IInvestigationsteps.
        /// </summary>
        public virtual IInvestigationsteps Investigationsteps { get; private set; }

        /// <summary>
        /// Gets the ILocationequipmentset.
        /// </summary>
        public virtual ILocationequipmentset Locationequipmentset { get; private set; }

        /// <summary>
        /// Gets the ILocations.
        /// </summary>
        public virtual ILocations Locations { get; private set; }

        /// <summary>
        /// Gets the IPostalcodes.
        /// </summary>
        public virtual IPostalcodes Postalcodes { get; private set; }

        /// <summary>
        /// Gets the IRegions.
        /// </summary>
        public virtual IRegions Regions { get; private set; }

        /// <summary>
        /// Gets the IRiskassessments.
        /// </summary>
        public virtual IRiskassessments Riskassessments { get; private set; }

        /// <summary>
        /// Gets the IRoles.
        /// </summary>
        public virtual IRoles Roles { get; private set; }

        /// <summary>
        /// Gets the ITermsconditionspresets.
        /// </summary>
        public virtual ITermsconditionspresets Termsconditionspresets { get; private set; }

        /// <summary>
        /// Gets the IViolationtickets.
        /// </summary>
        public virtual IViolationtickets Violationtickets { get; private set; }

        /// <summary>
        /// Gets the IContacts.
        /// </summary>
        public virtual IContacts Contacts { get; private set; }

        /// <summary>
        /// Gets the IIncidents.
        /// </summary>
        public virtual IIncidents Incidents { get; private set; }

        /// <summary>
        /// Gets the IInvoices.
        /// </summary>
        public virtual IInvoices Invoices { get; private set; }

        /// <summary>
        /// Gets the IMsdyncustomaddressknowledgearticlset.
        /// </summary>
        public virtual IMsdyncustomaddressknowledgearticlset Msdyncustomaddressknowledgearticlset { get; private set; }

        /// <summary>
        /// Gets the IMsdyncustomaddressknowledgebasereset.
        /// </summary>
        public virtual IMsdyncustomaddressknowledgebasereset Msdyncustomaddressknowledgebasereset { get; private set; }

        /// <summary>
        /// Gets the ISharepointdocumentlocations.
        /// </summary>
        public virtual ISharepointdocumentlocations Sharepointdocumentlocations { get; private set; }

        /// <summary>
        /// Gets the ISharepointsites.
        /// </summary>
        public virtual ISharepointsites Sharepointsites { get; private set; }

        /// <summary>
        /// Gets the IEntitydefinitions.
        /// </summary>
        public virtual IEntitydefinitions Entitydefinitions { get; private set; }

        /// <summary>
        /// Gets the IGlobaloptionsetdefinitions.
        /// </summary>
        public virtual IGlobaloptionsetdefinitions Globaloptionsetdefinitions { get; private set; }

        /// <summary>
        /// Initializes a new instance of the DynamicsClient class.
        /// </summary>
        /// <param name='httpClient'>
        /// HttpClient to be used
        /// </param>
        /// <param name='disposeHttpClient'>
        /// True: will dispose the provided httpClient on calling DynamicsClient.Dispose(). False: will not dispose provided httpClient</param>
        protected DynamicsClient(HttpClient httpClient, bool disposeHttpClient) : base(httpClient, disposeHttpClient)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the DynamicsClient class.
        /// </summary>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected DynamicsClient(params DelegatingHandler[] handlers) : base(handlers)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the DynamicsClient class.
        /// </summary>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected DynamicsClient(HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : base(rootHandler, handlers)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the DynamicsClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        protected DynamicsClient(System.Uri baseUri, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            BaseUri = baseUri;
        }

        /// <summary>
        /// Initializes a new instance of the DynamicsClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        protected DynamicsClient(System.Uri baseUri, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            BaseUri = baseUri;
        }

        /// <summary>
        /// Initializes a new instance of the DynamicsClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Subscription credentials which uniquely identify client subscription.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public DynamicsClient(ServiceClientCredentials credentials, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the DynamicsClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Subscription credentials which uniquely identify client subscription.
        /// </param>
        /// <param name='httpClient'>
        /// HttpClient to be used
        /// </param>
        /// <param name='disposeHttpClient'>
        /// True: will dispose the provided httpClient on calling DynamicsClient.Dispose(). False: will not dispose provided httpClient</param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public DynamicsClient(ServiceClientCredentials credentials, HttpClient httpClient, bool disposeHttpClient) : this(httpClient, disposeHttpClient)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the DynamicsClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Subscription credentials which uniquely identify client subscription.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public DynamicsClient(ServiceClientCredentials credentials, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the DynamicsClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='credentials'>
        /// Required. Subscription credentials which uniquely identify client subscription.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public DynamicsClient(System.Uri baseUri, ServiceClientCredentials credentials, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            BaseUri = baseUri;
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the DynamicsClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='credentials'>
        /// Required. Subscription credentials which uniquely identify client subscription.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public DynamicsClient(System.Uri baseUri, ServiceClientCredentials credentials, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            BaseUri = baseUri;
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// An optional partial-method to perform custom initialization.
        ///</summary>
        partial void CustomInitialize();
        /// <summary>
        /// Initializes client properties.
        /// </summary>
        private void Initialize()
        {
            Accounts = new Accounts(this);
            Actregulationreferences = new Actregulationreferences(this);
            Applicationtypes = new Applicationtypes(this);
            Areas = new Areas(this);
            Businesscontacts = new Businesscontacts(this);
            Cecontacts = new Cecontacts(this);
            Cecontacttypes = new Cecontacttypes(this);
            Certificateapprovedproducts = new Certificateapprovedproducts(this);
            Certificates = new Certificates(this);
            Certificatetermsandconditionses = new Certificatetermsandconditionses(this);
            Complaintcecontactset = new Complaintcecontactset(this);
            Complaints = new Complaints(this);
            Customaddresses = new Customaddresses(this);
            Customproducts = new Customproducts(this);
            Customusers = new Customusers(this);
            Equipmentlocations = new Equipmentlocations(this);
            Equipments = new Equipments(this);
            Incidentbusinesscontactset = new Incidentbusinesscontactset(this);
            Inspectionactregulationrefset = new Inspectionactregulationrefset(this);
            Inspectioninspectionchecklset = new Inspectioninspectionchecklset(this);
            Inspectionchecklistactreguset = new Inspectionchecklistactreguset(this);
            Inspectionchecklists = new Inspectionchecklists(this);
            Inspectionownershipcategories = new Inspectionownershipcategories(this);
            Inspectionprocessflows = new Inspectionprocessflows(this);
            Inspections = new Inspections(this);
            Investigations = new Investigations(this);
            Investigationstepcecontactset = new Investigationstepcecontactset(this);
            Investigationsteps = new Investigationsteps(this);
            Locationequipmentset = new Locationequipmentset(this);
            Locations = new Locations(this);
            Postalcodes = new Postalcodes(this);
            Regions = new Regions(this);
            Riskassessments = new Riskassessments(this);
            Roles = new Roles(this);
            Termsconditionspresets = new Termsconditionspresets(this);
            Violationtickets = new Violationtickets(this);
            Contacts = new Contacts(this);
            Incidents = new Incidents(this);
            Invoices = new Invoices(this);
            Msdyncustomaddressknowledgearticlset = new Msdyncustomaddressknowledgearticlset(this);
            Msdyncustomaddressknowledgebasereset = new Msdyncustomaddressknowledgebasereset(this);
            Sharepointdocumentlocations = new Sharepointdocumentlocations(this);
            Sharepointsites = new Sharepointsites(this);
            Entitydefinitions = new Entitydefinitions(this);
            Globaloptionsetdefinitions = new Globaloptionsetdefinitions(this);
            BaseUri = new System.Uri("https://wsgw.dev.jag.gov.bc.ca/pillpress/dev/api/data/v8.2");
            SerializationSettings = new JsonSerializerSettings
            {
                Formatting = Newtonsoft.Json.Formatting.Indented,
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new  List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            DeserializationSettings = new JsonSerializerSettings
            {
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            CustomInitialize();
        }
    }
}
