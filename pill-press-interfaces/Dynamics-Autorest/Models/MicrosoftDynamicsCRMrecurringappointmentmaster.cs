// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Gov.Jag.PillPressRegistry.Interfaces.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Microsoft.Dynamics.CRM.recurringappointmentmaster
    /// </summary>
    public partial class MicrosoftDynamicsCRMrecurringappointmentmaster
    {
        /// <summary>
        /// Initializes a new instance of the
        /// MicrosoftDynamicsCRMrecurringappointmentmaster class.
        /// </summary>
        public MicrosoftDynamicsCRMrecurringappointmentmaster()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// MicrosoftDynamicsCRMrecurringappointmentmaster class.
        /// </summary>
        /// <param name="occurrences">Number of appointment occurrences in a
        /// recurring appointment series.</param>
        /// <param name="importsequencenumber">Unique identifier of the data
        /// import or data migration that created this record.</param>
        /// <param name="category">Type a category to identify the recurring
        /// appointment type, such as status meeting or service call, to tie
        /// the appointment to a business group or function.</param>
        /// <param name="_ruleidValue">Unique identifier of the recurrence rule
        /// that is associated with the recurring appointment series.</param>
        /// <param name="isregenerate">For internal use only.</param>
        /// <param name="isnthmonthly">Indicates whether the recurring
        /// appointment series should occur after every N months. Valid for
        /// monthly recurrence pattern only.</param>
        /// <param name="endtime">End time of the associated activity.</param>
        /// <param name="daysofweekmask">Bitmask that represents the days of
        /// the week on which the recurring appointment occurs.</param>
        /// <param name="outlookownerapptid">Unique identifier of the Microsoft
        /// Office Outlook recurring appointment series owner that correlates
        /// to the PR_OWNER_APPT_ID MAPI property.</param>
        /// <param name="subscriptionid">For internal use only.</param>
        /// <param name="effectiveenddate">Actual end date of the recurring
        /// appointment series based on the specified end date and recurrence
        /// pattern.</param>
        /// <param name="isalldayevent">Select whether the recurring
        /// appointment is an all-day event to make sure that the required
        /// resources are scheduled for the full day.</param>
        /// <param name="patternenddate">End date of the recurrence
        /// range.</param>
        /// <param name="starttime">Start time of the recurring appointment
        /// series.</param>
        /// <param name="globalobjectid">Unique Outlook identifier to correlate
        /// recurring appointment series across Exchange mailboxes.</param>
        /// <param name="patternstartdate">Start date of the recurrence
        /// range.</param>
        /// <param name="overriddencreatedon">Date and time that the record was
        /// migrated.</param>
        /// <param name="instance">Specifies the recurring appointment series
        /// to occur on every Nth day of a month. Valid for monthly and yearly
        /// recurrence patterns only.</param>
        /// <param name="patternendtype">Select the type of end date for the
        /// recurring appointment, such as no end date or the number of
        /// occurrences.</param>
        /// <param name="deletedexceptionslist">List of deleted instances of
        /// the recurring appointment series.</param>
        /// <param name="nextexpansioninstancedate">Date of the next expanded
        /// instance of a recurring appointment series.</param>
        /// <param name="monthofyear">Indicates the month of the year for the
        /// recurrence pattern.</param>
        /// <param name="lastexpandedinstancedate">Date of last expanded
        /// instance of a recurring appointment series.</param>
        /// <param name="duration">Duration of the recurring appointment series
        /// in minutes.</param>
        /// <param name="isweekdaypattern">Indicates whether the weekly
        /// recurrence pattern is a daily weekday pattern. Valid for weekly
        /// recurrence pattern only.</param>
        /// <param name="firstdayofweek">First day of week for the recurrence
        /// pattern.</param>
        /// <param name="isnthyearly">Indicates whether the recurring
        /// appointment series should occur after every N years. Valid for
        /// yearly recurrence pattern only.</param>
        /// <param name="seriesstatus">Indicates whether the recurring
        /// appointment series is active or inactive.</param>
        /// <param name="subcategory">Type a subcategory to identify the
        /// recurring appointment type and relate the activity to a specific
        /// product, sales region, business group, or other function.</param>
        /// <param name="dayofmonth">The day of the month on which the
        /// recurring appointment occurs.</param>
        /// <param name="expansionstatecode">State code to indicate whether the
        /// recurring appointment series is expanded fully or
        /// partially.</param>
        /// <param name="effectivestartdate">Actual start date of the recurring
        /// appointment series based on the specified start date and recurrence
        /// pattern.</param>
        /// <param name="recurrencepatterntype">Select the pattern type for the
        /// recurring appointment to indicate whether the appointment occurs
        /// daily, weekly, monthly, or yearly.</param>
        /// <param name="_groupidValue">Unique identifier of the recurring
        /// appointment series for which the recurrence information was
        /// updated. </param>
        /// <param name="location">Type the location where the recurring
        /// appointment will take place, such as a conference room or customer
        /// office.</param>
        /// <param name="interval">Number of units of a given recurrence type
        /// between occurrences.</param>
        public MicrosoftDynamicsCRMrecurringappointmentmaster(int? occurrences = default(int?), int? importsequencenumber = default(int?), string category = default(string), string _ruleidValue = default(string), bool? isregenerate = default(bool?), bool? isnthmonthly = default(bool?), System.DateTimeOffset? endtime = default(System.DateTimeOffset?), int? daysofweekmask = default(int?), int? outlookownerapptid = default(int?), string subscriptionid = default(string), System.DateTimeOffset? effectiveenddate = default(System.DateTimeOffset?), bool? isalldayevent = default(bool?), System.DateTimeOffset? patternenddate = default(System.DateTimeOffset?), System.DateTimeOffset? starttime = default(System.DateTimeOffset?), string globalobjectid = default(string), System.DateTimeOffset? patternstartdate = default(System.DateTimeOffset?), System.DateTimeOffset? overriddencreatedon = default(System.DateTimeOffset?), int? instance = default(int?), int? patternendtype = default(int?), string deletedexceptionslist = default(string), System.DateTimeOffset? nextexpansioninstancedate = default(System.DateTimeOffset?), int? monthofyear = default(int?), System.DateTimeOffset? lastexpandedinstancedate = default(System.DateTimeOffset?), int? duration = default(int?), bool? isweekdaypattern = default(bool?), int? firstdayofweek = default(int?), bool? isnthyearly = default(bool?), bool? seriesstatus = default(bool?), string subcategory = default(string), int? dayofmonth = default(int?), int? expansionstatecode = default(int?), System.DateTimeOffset? effectivestartdate = default(System.DateTimeOffset?), int? recurrencepatterntype = default(int?), string _groupidValue = default(string), string location = default(string), int? interval = default(int?), MicrosoftDynamicsCRMentitlement regardingobjectidEntitlementRecurringappointmentmaster = default(MicrosoftDynamicsCRMentitlement), MicrosoftDynamicsCRMentitlementtemplate regardingobjectidEntitlementtemplateRecurringappointmentmaster = default(MicrosoftDynamicsCRMentitlementtemplate), IList<MicrosoftDynamicsCRMpostregarding> recurringappointmentmasterPostRegardings = default(IList<MicrosoftDynamicsCRMpostregarding>), IList<MicrosoftDynamicsCRMpostfollow> recurringappointmentmasterPostFollows = default(IList<MicrosoftDynamicsCRMpostfollow>), MicrosoftDynamicsCRMbookableresourcebooking regardingobjectidBookableresourcebookingRecurringappointmentmaster = default(MicrosoftDynamicsCRMbookableresourcebooking), MicrosoftDynamicsCRMbookableresourcebookingheader regardingobjectidBookableresourcebookingheaderRecurringappointmentmaster = default(MicrosoftDynamicsCRMbookableresourcebookingheader), MicrosoftDynamicsCRMknowledgebaserecord regardingobjectidKnowledgebaserecordRecurringappointmentmaster = default(MicrosoftDynamicsCRMknowledgebaserecord), IList<MicrosoftDynamicsCRMbulkdeletefailure> recurringAppointmentMasterBulkDeleteFailures = default(IList<MicrosoftDynamicsCRMbulkdeletefailure>), IList<MicrosoftDynamicsCRMasyncoperation> recurringAppointmentMasterAsyncOperations = default(IList<MicrosoftDynamicsCRMasyncoperation>), IList<MicrosoftDynamicsCRMduplicaterecord> recurringAppointmentMasterDuplicateBaseRecord = default(IList<MicrosoftDynamicsCRMduplicaterecord>), MicrosoftDynamicsCRMsystemuser owninguserRecurringappointmentmaster = default(MicrosoftDynamicsCRMsystemuser), MicrosoftDynamicsCRMteam owningteamRecurringappointmentmaster = default(MicrosoftDynamicsCRMteam), MicrosoftDynamicsCRMcontract regardingobjectidContractRecurringappointmentmaster = default(MicrosoftDynamicsCRMcontract), MicrosoftDynamicsCRMactivitypointer activityidActivitypointer = default(MicrosoftDynamicsCRMactivitypointer), IList<MicrosoftDynamicsCRMactivityparty> recurringappointmentmasterActivityParties = default(IList<MicrosoftDynamicsCRMactivityparty>), IList<MicrosoftDynamicsCRMduplicaterecord> recurringAppointmentMasterDuplicateMatchingRecord = default(IList<MicrosoftDynamicsCRMduplicaterecord>), MicrosoftDynamicsCRMbusinessunit owningbusinessunitRecurringappointmentmaster = default(MicrosoftDynamicsCRMbusinessunit), MicrosoftDynamicsCRMcampaign regardingobjectidCampaignRecurringappointmentmaster = default(MicrosoftDynamicsCRMcampaign), MicrosoftDynamicsCRMinvoice regardingobjectidInvoiceRecurringappointmentmaster = default(MicrosoftDynamicsCRMinvoice), MicrosoftDynamicsCRMservice serviceidRecurringappointmentmaster = default(MicrosoftDynamicsCRMservice), MicrosoftDynamicsCRMsystemuser createdonbehalfbyRecurringappointmentmaster = default(MicrosoftDynamicsCRMsystemuser), MicrosoftDynamicsCRMsystemuser createdbyRecurringappointmentmaster = default(MicrosoftDynamicsCRMsystemuser), MicrosoftDynamicsCRMknowledgearticle regardingobjectidKnowledgearticleRecurringappointmentmaster = default(MicrosoftDynamicsCRMknowledgearticle), IList<MicrosoftDynamicsCRMappointment> recurringappointmentmasterAppointment = default(IList<MicrosoftDynamicsCRMappointment>), MicrosoftDynamicsCRMaccount regardingobjectidAccountRecurringappointmentmaster = default(MicrosoftDynamicsCRMaccount), IList<MicrosoftDynamicsCRMqueueitem> recurringAppointmentMasterQueueItem = default(IList<MicrosoftDynamicsCRMqueueitem>), IList<MicrosoftDynamicsCRMconnection> recurringappointmentmasterConnections1 = default(IList<MicrosoftDynamicsCRMconnection>), MicrosoftDynamicsCRMsystemuser modifiedonbehalfbyRecurringappointmentmaster = default(MicrosoftDynamicsCRMsystemuser), MicrosoftDynamicsCRMlead regardingobjectidLeadRecurringappointmentmaster = default(MicrosoftDynamicsCRMlead), MicrosoftDynamicsCRMopportunity regardingobjectidOpportunityRecurringappointmentmaster = default(MicrosoftDynamicsCRMopportunity), MicrosoftDynamicsCRMtransactioncurrency transactioncurrencyidRecurringappointmentmaster = default(MicrosoftDynamicsCRMtransactioncurrency), IList<MicrosoftDynamicsCRMcampaignresponse> recurringappointmentmasterCampaignresponse = default(IList<MicrosoftDynamicsCRMcampaignresponse>), IList<MicrosoftDynamicsCRMconnection> recurringappointmentmasterConnections2 = default(IList<MicrosoftDynamicsCRMconnection>), IList<MicrosoftDynamicsCRMsyncerror> recurringAppointmentMasterSyncErrors = default(IList<MicrosoftDynamicsCRMsyncerror>), MicrosoftDynamicsCRMincident regardingobjectidIncidentRecurringappointmentmaster = default(MicrosoftDynamicsCRMincident), MicrosoftDynamicsCRMprocessstage stageidProcessstage = default(MicrosoftDynamicsCRMprocessstage), IList<MicrosoftDynamicsCRMactioncard> recurringappointmentmasterActioncard = default(IList<MicrosoftDynamicsCRMactioncard>), MicrosoftDynamicsCRMsalesorder regardingobjectidSalesorderRecurringappointmentmaster = default(MicrosoftDynamicsCRMsalesorder), MicrosoftDynamicsCRMquote regardingobjectidQuoteRecurringappointmentmaster = default(MicrosoftDynamicsCRMquote), MicrosoftDynamicsCRMcontact regardingobjectidContactRecurringappointmentmaster = default(MicrosoftDynamicsCRMcontact), MicrosoftDynamicsCRMsystemuser modifiedbyRecurringappointmentmaster = default(MicrosoftDynamicsCRMsystemuser), MicrosoftDynamicsCRMbulkoperation regardingobjectidBulkoperationRecurringappointmentmaster = default(MicrosoftDynamicsCRMbulkoperation), MicrosoftDynamicsCRMcampaignactivity regardingobjectidCampaignactivityRecurringappointmentmaster = default(MicrosoftDynamicsCRMcampaignactivity), IList<MicrosoftDynamicsCRMannotation> recurringAppointmentMasterAnnotation = default(IList<MicrosoftDynamicsCRMannotation>), MicrosoftDynamicsCRMabsScheduledprocess regardingobjectidAbsScheduledprocessRecurringappointmentmaster = default(MicrosoftDynamicsCRMabsScheduledprocess), MicrosoftDynamicsCRMbcgovCustomaddress regardingobjectidBcgovCustomaddressRecurringappointmentmaster = default(MicrosoftDynamicsCRMbcgovCustomaddress), MicrosoftDynamicsCRMbcgovCustomproduct regardingobjectidBcgovCustomproductRecurringappointmentmaster = default(MicrosoftDynamicsCRMbcgovCustomproduct), MicrosoftDynamicsCRMbcgovEquipment regardingobjectidBcgovEquipmentRecurringappointmentmaster = default(MicrosoftDynamicsCRMbcgovEquipment), MicrosoftDynamicsCRMbcgovEquipmentlocation regardingobjectidBcgovEquipmentlocationRecurringappointmentmaster = default(MicrosoftDynamicsCRMbcgovEquipmentlocation), MicrosoftDynamicsCRMbcgovLocation regardingobjectidBcgovLocationRecurringappointmentmaster = default(MicrosoftDynamicsCRMbcgovLocation), MicrosoftDynamicsCRMbcgovRiskassessment regardingobjectidBcgovRiskassessmentRecurringappointmentmaster = default(MicrosoftDynamicsCRMbcgovRiskassessment), MicrosoftDynamicsCRMbcgovInspection regardingobjectidBcgovInspectionRecurringappointmentmaster = default(MicrosoftDynamicsCRMbcgovInspection), MicrosoftDynamicsCRMbcgovComplaint regardingobjectidBcgovComplaintRecurringappointmentmaster = default(MicrosoftDynamicsCRMbcgovComplaint), MicrosoftDynamicsCRMbcgovViolationticket regardingobjectidBcgovViolationticketRecurringappointmentmaster = default(MicrosoftDynamicsCRMbcgovViolationticket), MicrosoftDynamicsCRMbcgovInvestigationstep regardingobjectidBcgovInvestigationstepRecurringappointmentmaster = default(MicrosoftDynamicsCRMbcgovInvestigationstep), MicrosoftDynamicsCRMbcgovInvestigation regardingobjectidBcgovInvestigationRecurringappointmentmaster = default(MicrosoftDynamicsCRMbcgovInvestigation))
        {
            Occurrences = occurrences;
            Importsequencenumber = importsequencenumber;
            Category = category;
            this._ruleidValue = _ruleidValue;
            Isregenerate = isregenerate;
            Isnthmonthly = isnthmonthly;
            Endtime = endtime;
            Daysofweekmask = daysofweekmask;
            Outlookownerapptid = outlookownerapptid;
            Subscriptionid = subscriptionid;
            Effectiveenddate = effectiveenddate;
            Isalldayevent = isalldayevent;
            Patternenddate = patternenddate;
            Starttime = starttime;
            Globalobjectid = globalobjectid;
            Patternstartdate = patternstartdate;
            Overriddencreatedon = overriddencreatedon;
            Instance = instance;
            Patternendtype = patternendtype;
            Deletedexceptionslist = deletedexceptionslist;
            Nextexpansioninstancedate = nextexpansioninstancedate;
            Monthofyear = monthofyear;
            Lastexpandedinstancedate = lastexpandedinstancedate;
            Duration = duration;
            Isweekdaypattern = isweekdaypattern;
            Firstdayofweek = firstdayofweek;
            Isnthyearly = isnthyearly;
            Seriesstatus = seriesstatus;
            Subcategory = subcategory;
            Dayofmonth = dayofmonth;
            Expansionstatecode = expansionstatecode;
            Effectivestartdate = effectivestartdate;
            Recurrencepatterntype = recurrencepatterntype;
            this._groupidValue = _groupidValue;
            Location = location;
            Interval = interval;
            RegardingobjectidEntitlementRecurringappointmentmaster = regardingobjectidEntitlementRecurringappointmentmaster;
            RegardingobjectidEntitlementtemplateRecurringappointmentmaster = regardingobjectidEntitlementtemplateRecurringappointmentmaster;
            RecurringappointmentmasterPostRegardings = recurringappointmentmasterPostRegardings;
            RecurringappointmentmasterPostFollows = recurringappointmentmasterPostFollows;
            RegardingobjectidBookableresourcebookingRecurringappointmentmaster = regardingobjectidBookableresourcebookingRecurringappointmentmaster;
            RegardingobjectidBookableresourcebookingheaderRecurringappointmentmaster = regardingobjectidBookableresourcebookingheaderRecurringappointmentmaster;
            RegardingobjectidKnowledgebaserecordRecurringappointmentmaster = regardingobjectidKnowledgebaserecordRecurringappointmentmaster;
            RecurringAppointmentMasterBulkDeleteFailures = recurringAppointmentMasterBulkDeleteFailures;
            RecurringAppointmentMasterAsyncOperations = recurringAppointmentMasterAsyncOperations;
            RecurringAppointmentMasterDuplicateBaseRecord = recurringAppointmentMasterDuplicateBaseRecord;
            OwninguserRecurringappointmentmaster = owninguserRecurringappointmentmaster;
            OwningteamRecurringappointmentmaster = owningteamRecurringappointmentmaster;
            RegardingobjectidContractRecurringappointmentmaster = regardingobjectidContractRecurringappointmentmaster;
            ActivityidActivitypointer = activityidActivitypointer;
            RecurringappointmentmasterActivityParties = recurringappointmentmasterActivityParties;
            RecurringAppointmentMasterDuplicateMatchingRecord = recurringAppointmentMasterDuplicateMatchingRecord;
            OwningbusinessunitRecurringappointmentmaster = owningbusinessunitRecurringappointmentmaster;
            RegardingobjectidCampaignRecurringappointmentmaster = regardingobjectidCampaignRecurringappointmentmaster;
            RegardingobjectidInvoiceRecurringappointmentmaster = regardingobjectidInvoiceRecurringappointmentmaster;
            ServiceidRecurringappointmentmaster = serviceidRecurringappointmentmaster;
            CreatedonbehalfbyRecurringappointmentmaster = createdonbehalfbyRecurringappointmentmaster;
            CreatedbyRecurringappointmentmaster = createdbyRecurringappointmentmaster;
            RegardingobjectidKnowledgearticleRecurringappointmentmaster = regardingobjectidKnowledgearticleRecurringappointmentmaster;
            RecurringappointmentmasterAppointment = recurringappointmentmasterAppointment;
            RegardingobjectidAccountRecurringappointmentmaster = regardingobjectidAccountRecurringappointmentmaster;
            RecurringAppointmentMasterQueueItem = recurringAppointmentMasterQueueItem;
            RecurringappointmentmasterConnections1 = recurringappointmentmasterConnections1;
            ModifiedonbehalfbyRecurringappointmentmaster = modifiedonbehalfbyRecurringappointmentmaster;
            RegardingobjectidLeadRecurringappointmentmaster = regardingobjectidLeadRecurringappointmentmaster;
            RegardingobjectidOpportunityRecurringappointmentmaster = regardingobjectidOpportunityRecurringappointmentmaster;
            TransactioncurrencyidRecurringappointmentmaster = transactioncurrencyidRecurringappointmentmaster;
            RecurringappointmentmasterCampaignresponse = recurringappointmentmasterCampaignresponse;
            RecurringappointmentmasterConnections2 = recurringappointmentmasterConnections2;
            RecurringAppointmentMasterSyncErrors = recurringAppointmentMasterSyncErrors;
            RegardingobjectidIncidentRecurringappointmentmaster = regardingobjectidIncidentRecurringappointmentmaster;
            StageidProcessstage = stageidProcessstage;
            RecurringappointmentmasterActioncard = recurringappointmentmasterActioncard;
            RegardingobjectidSalesorderRecurringappointmentmaster = regardingobjectidSalesorderRecurringappointmentmaster;
            RegardingobjectidQuoteRecurringappointmentmaster = regardingobjectidQuoteRecurringappointmentmaster;
            RegardingobjectidContactRecurringappointmentmaster = regardingobjectidContactRecurringappointmentmaster;
            ModifiedbyRecurringappointmentmaster = modifiedbyRecurringappointmentmaster;
            RegardingobjectidBulkoperationRecurringappointmentmaster = regardingobjectidBulkoperationRecurringappointmentmaster;
            RegardingobjectidCampaignactivityRecurringappointmentmaster = regardingobjectidCampaignactivityRecurringappointmentmaster;
            RecurringAppointmentMasterAnnotation = recurringAppointmentMasterAnnotation;
            RegardingobjectidAbsScheduledprocessRecurringappointmentmaster = regardingobjectidAbsScheduledprocessRecurringappointmentmaster;
            RegardingobjectidBcgovCustomaddressRecurringappointmentmaster = regardingobjectidBcgovCustomaddressRecurringappointmentmaster;
            RegardingobjectidBcgovCustomproductRecurringappointmentmaster = regardingobjectidBcgovCustomproductRecurringappointmentmaster;
            RegardingobjectidBcgovEquipmentRecurringappointmentmaster = regardingobjectidBcgovEquipmentRecurringappointmentmaster;
            RegardingobjectidBcgovEquipmentlocationRecurringappointmentmaster = regardingobjectidBcgovEquipmentlocationRecurringappointmentmaster;
            RegardingobjectidBcgovLocationRecurringappointmentmaster = regardingobjectidBcgovLocationRecurringappointmentmaster;
            RegardingobjectidBcgovRiskassessmentRecurringappointmentmaster = regardingobjectidBcgovRiskassessmentRecurringappointmentmaster;
            RegardingobjectidBcgovInspectionRecurringappointmentmaster = regardingobjectidBcgovInspectionRecurringappointmentmaster;
            RegardingobjectidBcgovComplaintRecurringappointmentmaster = regardingobjectidBcgovComplaintRecurringappointmentmaster;
            RegardingobjectidBcgovViolationticketRecurringappointmentmaster = regardingobjectidBcgovViolationticketRecurringappointmentmaster;
            RegardingobjectidBcgovInvestigationstepRecurringappointmentmaster = regardingobjectidBcgovInvestigationstepRecurringappointmentmaster;
            RegardingobjectidBcgovInvestigationRecurringappointmentmaster = regardingobjectidBcgovInvestigationRecurringappointmentmaster;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets number of appointment occurrences in a recurring
        /// appointment series.
        /// </summary>
        [JsonProperty(PropertyName = "occurrences")]
        public int? Occurrences { get; set; }

        /// <summary>
        /// Gets or sets unique identifier of the data import or data migration
        /// that created this record.
        /// </summary>
        [JsonProperty(PropertyName = "importsequencenumber")]
        public int? Importsequencenumber { get; set; }

        /// <summary>
        /// Gets or sets type a category to identify the recurring appointment
        /// type, such as status meeting or service call, to tie the
        /// appointment to a business group or function.
        /// </summary>
        [JsonProperty(PropertyName = "category")]
        public string Category { get; set; }

        /// <summary>
        /// Gets or sets unique identifier of the recurrence rule that is
        /// associated with the recurring appointment series.
        /// </summary>
        [JsonProperty(PropertyName = "_ruleid_value")]
        public string _ruleidValue { get; set; }

        /// <summary>
        /// Gets or sets for internal use only.
        /// </summary>
        [JsonProperty(PropertyName = "isregenerate")]
        public bool? Isregenerate { get; set; }

        /// <summary>
        /// Gets or sets indicates whether the recurring appointment series
        /// should occur after every N months. Valid for monthly recurrence
        /// pattern only.
        /// </summary>
        [JsonProperty(PropertyName = "isnthmonthly")]
        public bool? Isnthmonthly { get; set; }

        /// <summary>
        /// Gets or sets end time of the associated activity.
        /// </summary>
        [JsonProperty(PropertyName = "endtime")]
        public System.DateTimeOffset? Endtime { get; set; }

        /// <summary>
        /// Gets or sets bitmask that represents the days of the week on which
        /// the recurring appointment occurs.
        /// </summary>
        [JsonProperty(PropertyName = "daysofweekmask")]
        public int? Daysofweekmask { get; set; }

        /// <summary>
        /// Gets or sets unique identifier of the Microsoft Office Outlook
        /// recurring appointment series owner that correlates to the
        /// PR_OWNER_APPT_ID MAPI property.
        /// </summary>
        [JsonProperty(PropertyName = "outlookownerapptid")]
        public int? Outlookownerapptid { get; set; }

        /// <summary>
        /// Gets or sets for internal use only.
        /// </summary>
        [JsonProperty(PropertyName = "subscriptionid")]
        public string Subscriptionid { get; set; }

        /// <summary>
        /// Gets or sets actual end date of the recurring appointment series
        /// based on the specified end date and recurrence pattern.
        /// </summary>
        [JsonProperty(PropertyName = "effectiveenddate")]
        public System.DateTimeOffset? Effectiveenddate { get; set; }

        /// <summary>
        /// Gets or sets select whether the recurring appointment is an all-day
        /// event to make sure that the required resources are scheduled for
        /// the full day.
        /// </summary>
        [JsonProperty(PropertyName = "isalldayevent")]
        public bool? Isalldayevent { get; set; }

        /// <summary>
        /// Gets or sets end date of the recurrence range.
        /// </summary>
        [JsonProperty(PropertyName = "patternenddate")]
        public System.DateTimeOffset? Patternenddate { get; set; }

        /// <summary>
        /// Gets or sets start time of the recurring appointment series.
        /// </summary>
        [JsonProperty(PropertyName = "starttime")]
        public System.DateTimeOffset? Starttime { get; set; }

        /// <summary>
        /// Gets or sets unique Outlook identifier to correlate recurring
        /// appointment series across Exchange mailboxes.
        /// </summary>
        [JsonProperty(PropertyName = "globalobjectid")]
        public string Globalobjectid { get; set; }

        /// <summary>
        /// Gets or sets start date of the recurrence range.
        /// </summary>
        [JsonProperty(PropertyName = "patternstartdate")]
        public System.DateTimeOffset? Patternstartdate { get; set; }

        /// <summary>
        /// Gets or sets date and time that the record was migrated.
        /// </summary>
        [JsonProperty(PropertyName = "overriddencreatedon")]
        public System.DateTimeOffset? Overriddencreatedon { get; set; }

        /// <summary>
        /// Gets or sets specifies the recurring appointment series to occur on
        /// every Nth day of a month. Valid for monthly and yearly recurrence
        /// patterns only.
        /// </summary>
        [JsonProperty(PropertyName = "instance")]
        public int? Instance { get; set; }

        /// <summary>
        /// Gets or sets select the type of end date for the recurring
        /// appointment, such as no end date or the number of occurrences.
        /// </summary>
        [JsonProperty(PropertyName = "patternendtype")]
        public int? Patternendtype { get; set; }

        /// <summary>
        /// Gets or sets list of deleted instances of the recurring appointment
        /// series.
        /// </summary>
        [JsonProperty(PropertyName = "deletedexceptionslist")]
        public string Deletedexceptionslist { get; set; }

        /// <summary>
        /// Gets or sets date of the next expanded instance of a recurring
        /// appointment series.
        /// </summary>
        [JsonProperty(PropertyName = "nextexpansioninstancedate")]
        public System.DateTimeOffset? Nextexpansioninstancedate { get; set; }

        /// <summary>
        /// Gets or sets indicates the month of the year for the recurrence
        /// pattern.
        /// </summary>
        [JsonProperty(PropertyName = "monthofyear")]
        public int? Monthofyear { get; set; }

        /// <summary>
        /// Gets or sets date of last expanded instance of a recurring
        /// appointment series.
        /// </summary>
        [JsonProperty(PropertyName = "lastexpandedinstancedate")]
        public System.DateTimeOffset? Lastexpandedinstancedate { get; set; }

        /// <summary>
        /// Gets or sets duration of the recurring appointment series in
        /// minutes.
        /// </summary>
        [JsonProperty(PropertyName = "duration")]
        public int? Duration { get; set; }

        /// <summary>
        /// Gets or sets indicates whether the weekly recurrence pattern is a
        /// daily weekday pattern. Valid for weekly recurrence pattern only.
        /// </summary>
        [JsonProperty(PropertyName = "isweekdaypattern")]
        public bool? Isweekdaypattern { get; set; }

        /// <summary>
        /// Gets or sets first day of week for the recurrence pattern.
        /// </summary>
        [JsonProperty(PropertyName = "firstdayofweek")]
        public int? Firstdayofweek { get; set; }

        /// <summary>
        /// Gets or sets indicates whether the recurring appointment series
        /// should occur after every N years. Valid for yearly recurrence
        /// pattern only.
        /// </summary>
        [JsonProperty(PropertyName = "isnthyearly")]
        public bool? Isnthyearly { get; set; }

        /// <summary>
        /// Gets or sets indicates whether the recurring appointment series is
        /// active or inactive.
        /// </summary>
        [JsonProperty(PropertyName = "seriesstatus")]
        public bool? Seriesstatus { get; set; }

        /// <summary>
        /// Gets or sets type a subcategory to identify the recurring
        /// appointment type and relate the activity to a specific product,
        /// sales region, business group, or other function.
        /// </summary>
        [JsonProperty(PropertyName = "subcategory")]
        public string Subcategory { get; set; }

        /// <summary>
        /// Gets or sets the day of the month on which the recurring
        /// appointment occurs.
        /// </summary>
        [JsonProperty(PropertyName = "dayofmonth")]
        public int? Dayofmonth { get; set; }

        /// <summary>
        /// Gets or sets state code to indicate whether the recurring
        /// appointment series is expanded fully or partially.
        /// </summary>
        [JsonProperty(PropertyName = "expansionstatecode")]
        public int? Expansionstatecode { get; set; }

        /// <summary>
        /// Gets or sets actual start date of the recurring appointment series
        /// based on the specified start date and recurrence pattern.
        /// </summary>
        [JsonProperty(PropertyName = "effectivestartdate")]
        public System.DateTimeOffset? Effectivestartdate { get; set; }

        /// <summary>
        /// Gets or sets select the pattern type for the recurring appointment
        /// to indicate whether the appointment occurs daily, weekly, monthly,
        /// or yearly.
        /// </summary>
        [JsonProperty(PropertyName = "recurrencepatterntype")]
        public int? Recurrencepatterntype { get; set; }

        /// <summary>
        /// Gets or sets unique identifier of the recurring appointment series
        /// for which the recurrence information was updated.
        /// </summary>
        [JsonProperty(PropertyName = "_groupid_value")]
        public string _groupidValue { get; set; }

        /// <summary>
        /// Gets or sets type the location where the recurring appointment will
        /// take place, such as a conference room or customer office.
        /// </summary>
        [JsonProperty(PropertyName = "location")]
        public string Location { get; set; }

        /// <summary>
        /// Gets or sets number of units of a given recurrence type between
        /// occurrences.
        /// </summary>
        [JsonProperty(PropertyName = "interval")]
        public int? Interval { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "regardingobjectid_entitlement_recurringappointmentmaster")]
        public MicrosoftDynamicsCRMentitlement RegardingobjectidEntitlementRecurringappointmentmaster { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "regardingobjectid_entitlementtemplate_recurringappointmentmaster")]
        public MicrosoftDynamicsCRMentitlementtemplate RegardingobjectidEntitlementtemplateRecurringappointmentmaster { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "recurringappointmentmaster_PostRegardings")]
        public IList<MicrosoftDynamicsCRMpostregarding> RecurringappointmentmasterPostRegardings { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "recurringappointmentmaster_PostFollows")]
        public IList<MicrosoftDynamicsCRMpostfollow> RecurringappointmentmasterPostFollows { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "regardingobjectid_bookableresourcebooking_recurringappointmentmaster")]
        public MicrosoftDynamicsCRMbookableresourcebooking RegardingobjectidBookableresourcebookingRecurringappointmentmaster { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "regardingobjectid_bookableresourcebookingheader_recurringappointmentmaster")]
        public MicrosoftDynamicsCRMbookableresourcebookingheader RegardingobjectidBookableresourcebookingheaderRecurringappointmentmaster { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "regardingobjectid_knowledgebaserecord_recurringappointmentmaster")]
        public MicrosoftDynamicsCRMknowledgebaserecord RegardingobjectidKnowledgebaserecordRecurringappointmentmaster { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "RecurringAppointmentMaster_BulkDeleteFailures")]
        public IList<MicrosoftDynamicsCRMbulkdeletefailure> RecurringAppointmentMasterBulkDeleteFailures { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "RecurringAppointmentMaster_AsyncOperations")]
        public IList<MicrosoftDynamicsCRMasyncoperation> RecurringAppointmentMasterAsyncOperations { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "RecurringAppointmentMaster_DuplicateBaseRecord")]
        public IList<MicrosoftDynamicsCRMduplicaterecord> RecurringAppointmentMasterDuplicateBaseRecord { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "owninguser_recurringappointmentmaster")]
        public MicrosoftDynamicsCRMsystemuser OwninguserRecurringappointmentmaster { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "owningteam_recurringappointmentmaster")]
        public MicrosoftDynamicsCRMteam OwningteamRecurringappointmentmaster { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "regardingobjectid_contract_recurringappointmentmaster")]
        public MicrosoftDynamicsCRMcontract RegardingobjectidContractRecurringappointmentmaster { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "activityid_activitypointer")]
        public MicrosoftDynamicsCRMactivitypointer ActivityidActivitypointer { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "recurringappointmentmaster_activity_parties")]
        public IList<MicrosoftDynamicsCRMactivityparty> RecurringappointmentmasterActivityParties { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "RecurringAppointmentMaster_DuplicateMatchingRecord")]
        public IList<MicrosoftDynamicsCRMduplicaterecord> RecurringAppointmentMasterDuplicateMatchingRecord { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "owningbusinessunit_recurringappointmentmaster")]
        public MicrosoftDynamicsCRMbusinessunit OwningbusinessunitRecurringappointmentmaster { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "regardingobjectid_campaign_recurringappointmentmaster")]
        public MicrosoftDynamicsCRMcampaign RegardingobjectidCampaignRecurringappointmentmaster { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "regardingobjectid_invoice_recurringappointmentmaster")]
        public MicrosoftDynamicsCRMinvoice RegardingobjectidInvoiceRecurringappointmentmaster { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "serviceid_recurringappointmentmaster")]
        public MicrosoftDynamicsCRMservice ServiceidRecurringappointmentmaster { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "createdonbehalfby_recurringappointmentmaster")]
        public MicrosoftDynamicsCRMsystemuser CreatedonbehalfbyRecurringappointmentmaster { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "createdby_recurringappointmentmaster")]
        public MicrosoftDynamicsCRMsystemuser CreatedbyRecurringappointmentmaster { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "regardingobjectid_knowledgearticle_recurringappointmentmaster")]
        public MicrosoftDynamicsCRMknowledgearticle RegardingobjectidKnowledgearticleRecurringappointmentmaster { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "recurringappointmentmaster_appointment")]
        public IList<MicrosoftDynamicsCRMappointment> RecurringappointmentmasterAppointment { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "regardingobjectid_account_recurringappointmentmaster")]
        public MicrosoftDynamicsCRMaccount RegardingobjectidAccountRecurringappointmentmaster { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "RecurringAppointmentMaster_QueueItem")]
        public IList<MicrosoftDynamicsCRMqueueitem> RecurringAppointmentMasterQueueItem { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "recurringappointmentmaster_connections1")]
        public IList<MicrosoftDynamicsCRMconnection> RecurringappointmentmasterConnections1 { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "modifiedonbehalfby_recurringappointmentmaster")]
        public MicrosoftDynamicsCRMsystemuser ModifiedonbehalfbyRecurringappointmentmaster { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "regardingobjectid_lead_recurringappointmentmaster")]
        public MicrosoftDynamicsCRMlead RegardingobjectidLeadRecurringappointmentmaster { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "regardingobjectid_opportunity_recurringappointmentmaster")]
        public MicrosoftDynamicsCRMopportunity RegardingobjectidOpportunityRecurringappointmentmaster { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "transactioncurrencyid_recurringappointmentmaster")]
        public MicrosoftDynamicsCRMtransactioncurrency TransactioncurrencyidRecurringappointmentmaster { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "recurringappointmentmaster_campaignresponse")]
        public IList<MicrosoftDynamicsCRMcampaignresponse> RecurringappointmentmasterCampaignresponse { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "recurringappointmentmaster_connections2")]
        public IList<MicrosoftDynamicsCRMconnection> RecurringappointmentmasterConnections2 { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "RecurringAppointmentMaster_SyncErrors")]
        public IList<MicrosoftDynamicsCRMsyncerror> RecurringAppointmentMasterSyncErrors { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "regardingobjectid_incident_recurringappointmentmaster")]
        public MicrosoftDynamicsCRMincident RegardingobjectidIncidentRecurringappointmentmaster { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "stageid_processstage")]
        public MicrosoftDynamicsCRMprocessstage StageidProcessstage { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "recurringappointmentmaster_actioncard")]
        public IList<MicrosoftDynamicsCRMactioncard> RecurringappointmentmasterActioncard { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "regardingobjectid_salesorder_recurringappointmentmaster")]
        public MicrosoftDynamicsCRMsalesorder RegardingobjectidSalesorderRecurringappointmentmaster { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "regardingobjectid_quote_recurringappointmentmaster")]
        public MicrosoftDynamicsCRMquote RegardingobjectidQuoteRecurringappointmentmaster { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "regardingobjectid_contact_recurringappointmentmaster")]
        public MicrosoftDynamicsCRMcontact RegardingobjectidContactRecurringappointmentmaster { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "modifiedby_recurringappointmentmaster")]
        public MicrosoftDynamicsCRMsystemuser ModifiedbyRecurringappointmentmaster { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "regardingobjectid_bulkoperation_recurringappointmentmaster")]
        public MicrosoftDynamicsCRMbulkoperation RegardingobjectidBulkoperationRecurringappointmentmaster { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "regardingobjectid_campaignactivity_recurringappointmentmaster")]
        public MicrosoftDynamicsCRMcampaignactivity RegardingobjectidCampaignactivityRecurringappointmentmaster { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "RecurringAppointmentMaster_Annotation")]
        public IList<MicrosoftDynamicsCRMannotation> RecurringAppointmentMasterAnnotation { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "regardingobjectid_abs_scheduledprocess_recurringappointmentmaster")]
        public MicrosoftDynamicsCRMabsScheduledprocess RegardingobjectidAbsScheduledprocessRecurringappointmentmaster { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "regardingobjectid_bcgov_customaddress_recurringappointmentmaster")]
        public MicrosoftDynamicsCRMbcgovCustomaddress RegardingobjectidBcgovCustomaddressRecurringappointmentmaster { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "regardingobjectid_bcgov_customproduct_recurringappointmentmaster")]
        public MicrosoftDynamicsCRMbcgovCustomproduct RegardingobjectidBcgovCustomproductRecurringappointmentmaster { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "regardingobjectid_bcgov_equipment_recurringappointmentmaster")]
        public MicrosoftDynamicsCRMbcgovEquipment RegardingobjectidBcgovEquipmentRecurringappointmentmaster { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "regardingobjectid_bcgov_equipmentlocation_recurringappointmentmaster")]
        public MicrosoftDynamicsCRMbcgovEquipmentlocation RegardingobjectidBcgovEquipmentlocationRecurringappointmentmaster { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "regardingobjectid_bcgov_location_recurringappointmentmaster")]
        public MicrosoftDynamicsCRMbcgovLocation RegardingobjectidBcgovLocationRecurringappointmentmaster { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "regardingobjectid_bcgov_riskassessment_recurringappointmentmaster")]
        public MicrosoftDynamicsCRMbcgovRiskassessment RegardingobjectidBcgovRiskassessmentRecurringappointmentmaster { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "regardingobjectid_bcgov_inspection_recurringappointmentmaster")]
        public MicrosoftDynamicsCRMbcgovInspection RegardingobjectidBcgovInspectionRecurringappointmentmaster { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "regardingobjectid_bcgov_complaint_recurringappointmentmaster")]
        public MicrosoftDynamicsCRMbcgovComplaint RegardingobjectidBcgovComplaintRecurringappointmentmaster { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "regardingobjectid_bcgov_violationticket_recurringappointmentmaster")]
        public MicrosoftDynamicsCRMbcgovViolationticket RegardingobjectidBcgovViolationticketRecurringappointmentmaster { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "regardingobjectid_bcgov_investigationstep_recurringappointmentmaster")]
        public MicrosoftDynamicsCRMbcgovInvestigationstep RegardingobjectidBcgovInvestigationstepRecurringappointmentmaster { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "regardingobjectid_bcgov_investigation_recurringappointmentmaster")]
        public MicrosoftDynamicsCRMbcgovInvestigation RegardingobjectidBcgovInvestigationRecurringappointmentmaster { get; set; }

    }
}
